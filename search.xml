<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Java正则表达式</title>
    <url>/2020/03/12/Java%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="Java正则表达式"><a href="#Java正则表达式" class="headerlink" title="Java正则表达式"></a>Java正则表达式</h2><p>正则表达式定义了字符串的模式。</p>
<p>正则表达式可以用来搜索、编辑或处理文本。</p>
<p>正则表达式并不仅限于某一种语言，但是在每种语言中有细微的差别。</p>
<h4 id="正则表达式示例"><a href="#正则表达式示例" class="headerlink" title="正则表达式示例"></a>正则表达式示例</h4><p>一个字符串其实就是一个简单的正则表达式，例如 <strong>Hello World</strong> 正则表达式匹配 “Hello World” 字符串。</p>
<p><strong>.</strong>（点号）也是一个正则表达式，它匹配任何一个字符如：”a” 或 “1”。</p>
<p>下表列出了一些正则表达式的实例及描述：</p>
<table>
<thead>
<tr>
<th>正则表达式</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>this is text</td>
<td>匹配字符串 “this is text”</td>
</tr>
<tr>
<td>this\s+is\s+text</td>
<td>注意字符串中的 \s+。匹配单词 “this” 后面的 \s+ 可以匹配多个空格，之后匹配 is 字符串，再之后 \s+ 匹配多个空格然后再跟上 text 字符串。可以匹配这个实例：this is text</td>
</tr>
<tr>
<td>^\d+(.\d+)?</td>
<td>^ 定义了以什么开始\d+ 匹配一个或多个数字，? 设置括号内的选项是可选的. 匹配 “.”   可以匹配的实例：”5”, “1.5” 和 “2.21”。</td>
</tr>
</tbody></table>
<p> Java 正则表达式和 Perl 的是最为相似的。 </p>
<p> java.util.regex 包主要包括以下三个类： </p>
<p><strong>·Pattern类</strong></p>
<p> pattern 对象是一个正则表达式的编译表示。Pattern 类没有公共构造方法。要创建一个 Pattern 对象，你必须首先调用其公共静态编译方法，它返回一个 Pattern 对象。该方法接受一个正则表达式作为它的第一个参数。 </p>
<p><strong>·Matcher 类：</strong></p>
<p>Matcher 对象是对输入字符串进行解释和匹配操作的引擎。与Pattern 类一样，Matcher 也没有公共构造方法。你需要调用 Pattern 对象的 matcher 方法来获得一个 Matcher 对象。</p>
<p><strong>·PatternSyntaxException：</strong></p>
<p>PatternSyntaxException 是一个非强制异常类，它表示一个正则表达式模式中的语法错误。</p>
<p>以下实例使用了正则表达式.<em>runoob.</em>用于查找字符串中是否包含runoob子串：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.util.regex.*&#x2F;&#x2F;通配符</span><br><span class="line"></span><br><span class="line">class RegexExample1&#123;</span><br><span class="line">	public static void main(String args[])&#123;</span><br><span class="line">		String content &#x3D;&quot;I am noob&quot;+&quot;from runoob.com&quot;;</span><br><span class="line">		</span><br><span class="line">		String pattern&#x3D;&quot;.*runoob.*&quot;;</span><br><span class="line">		</span><br><span class="line">		boolean isMatch&#x3D;Pattern.matches(pattern,content);</span><br><span class="line">		System.out.println(&quot;字符串中是否包含了&#39;runoob&#39;子字符串？&quot;+isMatch);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出结果为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">字符串中是否包含了 &#39;runoob&#39; 子字符串? true</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>字节跳动笔试01</title>
    <url>/2020/02/28/Bytedance01/</url>
    <content><![CDATA[<p>question：</p>
<p>links:<a href="https://www.nowcoder.com/questionTerminal/42852fd7045c442192fa89404ab42e92?orderByHotValue=1&mutiTagIds=665&page=1&onlyReference=false" target="_blank" rel="noopener">王大锤编辑</a></p>
<ol>
<li><p>三个同样的字母连在一起，一定是拼写错误，去掉一个的就好啦：比如 helllo -&gt; hello </p>
</li>
<li><p>两对一样的字母（AABB型）连在一起，一定是拼写错误，去掉第二对的一个字母就好啦：比如 helloo -&gt; hello </p>
</li>
<li><p>上面的规则优先“从左到右”匹配，即如果是AABBCC，虽然AABB和BBCC都是错误拼写，应该优先考虑修复AABB，结果为AABCC</p>
<p>examples：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">IN:</span><br><span class="line">2 </span><br><span class="line">helloo</span><br><span class="line">woooooooow</span><br><span class="line">OUT:</span><br><span class="line">hello </span><br><span class="line">woow</span><br></pre></td></tr></table></figure>

<p>idea:仔细思考可以发现，最少都在三个字符后需要修改，所以我们只需保证j位置的放入是正确的，判断j位置之前的是否符合即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;bits&#x2F;stdc++.h&gt;                                                           C++</span><br><span class="line">using namespace std;</span><br><span class="line">int main() </span><br><span class="line">&#123;</span><br><span class="line">    int n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    string s;</span><br><span class="line">    while(n--)</span><br><span class="line">    &#123;</span><br><span class="line">        cin&gt;&gt;s;</span><br><span class="line">        int j&#x3D;0;</span><br><span class="line">        for(int i&#x3D;0;i&lt;s.size();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            s[j++]&#x3D;s[i];   &#x2F;&#x2F;j还没用</span><br><span class="line">            if(j&gt;&#x3D;3&amp;&amp;s[j-1]&#x3D;&#x3D;s[j-2]&amp;&amp;s[j-2]&#x3D;&#x3D;s[j-3]) </span><br><span class="line">                j--;</span><br><span class="line">            if(j&gt;&#x3D;4&amp;&amp;s[j-1]&#x3D;&#x3D;s[j-2]&amp;&amp;s[j-3]&#x3D;&#x3D;s[j-4]) </span><br><span class="line">                j--;</span><br><span class="line">        &#125;</span><br><span class="line">        s.erase(s.begin()+j,s.end());</span><br><span class="line">        cout&lt;&lt;s&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>明更~</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Bytedance</category>
      </categories>
      <tags>
        <tag>大厂笔试题目</tag>
      </tags>
  </entry>
  <entry>
    <title>字节跳动笔试02</title>
    <url>/2020/02/28/Bytedance02/</url>
    <content><![CDATA[<p>question：</p>
<p>links:<a href="https://www.nowcoder.com/question/next?pid=16516564&qid=362290&tid=31366563" target="_blank" rel="noopener">雀魂启动</a></p>
<p>examples：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">IN:</span><br><span class="line">1 1 1 2 2 2 5 5 5 6 6 6 9</span><br><span class="line">OUT:</span><br><span class="line">9</span><br></pre></td></tr></table></figure>

<p>idea:回溯法，已有13张牌，我们从剩余的牌中依次从1到9选择一张牌作为第14张牌，然后判断是否已经构成胡牌</p>
<p>  判断胡牌思路：从1到9中选择一个数字作为雀头，然后判断剩余的数字是否包含4个三张牌</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> bytedance01;                                                                 </span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 回溯法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">13</span>];</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] count;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        count = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">9</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            arr[i] = scanner.nextInt();</span><br><span class="line">            ++count[arr[i]-<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> winCount = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 选择1到9中的一个作为第14张牌，然后判断是否胡牌</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span> ; i &lt;= <span class="number">9</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(count[i-<span class="number">1</span>]&lt;<span class="number">4</span>)&#123;</span><br><span class="line">                ++count[i-<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span>(win())&#123;</span><br><span class="line">                    ++winCount;</span><br><span class="line">                    System.out.print(i);</span><br><span class="line">                    System.out.print(<span class="string">" "</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                --count[i-<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(winCount==<span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">win</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 从1到9 中选择一个作为雀头, 然后判断剩余的牌是否构成4对-----first step</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(count[i-<span class="number">1</span>]&lt;<span class="number">2</span>)&#123;<span class="comment">//不满两张，无法构成雀头，跳过这个数字</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            count[i-<span class="number">1</span>]-=<span class="number">2</span>;<span class="comment">//发现可以做雀头时，将这种数字的总数减2，</span></span><br><span class="line">            <span class="keyword">if</span>(hasTriples(<span class="number">4</span>))&#123;</span><br><span class="line">                count[i-<span class="number">1</span>]+=<span class="number">2</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            count[i-<span class="number">1</span>]+=<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">hasTriples</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;<span class="comment">//判断刻子，即是否有三张一样数字的-----second step</span></span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 1到9，每一张牌尝试三张或顺子</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(count[i-<span class="number">1</span>]&gt;=<span class="number">3</span>)&#123;<span class="comment">//该牌可能做顺子，并减3</span></span><br><span class="line">                count[i-<span class="number">1</span>]-=<span class="number">3</span>;</span><br><span class="line">                <span class="keyword">boolean</span> subHashTriples = hasTriples(n-<span class="number">1</span>);</span><br><span class="line">                count[i-<span class="number">1</span>]+=<span class="number">3</span>;</span><br><span class="line">                <span class="keyword">if</span>(subHashTriples)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i&lt;=<span class="number">7</span>  &amp;&amp; count[i-<span class="number">1</span>]&gt;<span class="number">0</span> &amp;&amp; count[i] &gt; <span class="number">0</span> &amp;&amp; count[i+<span class="number">1</span>]&gt;<span class="number">0</span>)&#123;<span class="comment">//已经完成了雀头和刻子的寻找，，开始寻找顺子----third step</span></span><br><span class="line">                --count[i-<span class="number">1</span>];</span><br><span class="line">                --count[i];</span><br><span class="line">                --count[i+<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">boolean</span> subHasTriples = hasTriples(n-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">                ++count[i-<span class="number">1</span>];</span><br><span class="line">                ++count[i];</span><br><span class="line">                ++count[i+<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span>(subHasTriples)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>明更~</p>
]]></content>
      <categories>
        <category>Bytedance</category>
      </categories>
      <tags>
        <tag>大厂笔试题目</tag>
      </tags>
  </entry>
  <entry>
    <title>有关类的小例子</title>
    <url>/2020/02/28/Java%E5%B0%8F%E4%BE%8B%E5%AD%90/</url>
    <content><![CDATA[<p>今天讲一下java类的创建</p>
<p>例：我们要做一个时钟，让它具有分钟到60，小时加1的功能</p>
<p>先做一个Dispaly的功能：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import javax.tools.Diagnostic;</span><br><span class="line"></span><br><span class="line">public class Display &#123;</span><br><span class="line">    private int value&#x3D;0;</span><br><span class="line">    private int limit&#x3D;0;</span><br><span class="line"></span><br><span class="line">    public Display(int limit)</span><br><span class="line">    &#123;</span><br><span class="line">        this.limit&#x3D;limit;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void increase()&#123;</span><br><span class="line">        value++;</span><br><span class="line">        if(value&#x3D;&#x3D;limit)&#123;</span><br><span class="line">            value&#x3D;0;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getValue()&#123;</span><br><span class="line">        return value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Display d&#x3D; new Display(24);</span><br><span class="line">        for(;;)&#123;</span><br><span class="line">            d.increase();</span><br><span class="line">            System.out.println(d.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个功能，使得小时可以从0-24进行循环。如何让它与分钟联系在一起呢？</p>
<p>我们还需要一个类，用来让分钟，小时进行加一的操作：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Clock &#123;</span><br><span class="line">    private Display hour &#x3D;new Display(24);</span><br><span class="line">    private Display minute&#x3D;new Display(60);</span><br><span class="line"></span><br><span class="line">    public void start()</span><br><span class="line">    &#123;</span><br><span class="line">        while (true) &#123;</span><br><span class="line">            minute.increase();</span><br><span class="line">            if (minute.getValue() &#x3D;&#x3D; 0) &#123;</span><br><span class="line">                hour.increase();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.printf(&quot;%02d:%02d\n&quot;, hour.getValue(), minute.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Clock clock &#x3D;new Clock();</span><br><span class="line">        clock.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样，就让小时与分钟联系在了一起。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Java总结</title>
    <url>/2020/02/28/Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<p>写在前面：学习java也有一段时间了，最近在做一个项目，也正好趁假期时间，整理一下java学习的知识点，温故而知新，可以为师矣。</p>
<h2 id="1-第一个Java程序"><a href="#1-第一个Java程序" class="headerlink" title="1. 第一个Java程序"></a>1. 第一个Java程序</h2><p>实例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  public class HelloWorld&#123;</span><br><span class="line">  &#x2F;*第一个Java程序</span><br><span class="line">  它将打印Hello，World*&#x2F;</span><br><span class="line">  	public static void main(String [] args)&#123;</span><br><span class="line">    System.out.println(&quot;Hello,World);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-关键字-amp-标识符"><a href="#2-关键字-amp-标识符" class="headerlink" title="2. 关键字&amp;标识符"></a>2. 关键字&amp;标识符</h2><h3 id="2-1-关键字的概念，特征"><a href="#2-1-关键字的概念，特征" class="headerlink" title="2.1 关键字的概念，特征"></a>2.1 关键字的概念，特征</h3><p><strong>概念：Java关键字是事先定义好</strong>的对Java的编译器有特殊的意义，他们用来表示一种数据类型，或者表示程序的结构等，<strong>关键字不能用作变量名、方法名、类名、包名和参数。</strong></p>
<p>特征：</p>
<p>·完全小写</p>
<p>·在sublime中有特殊颜色</p>
<h3 id="2-2-标识符的概念与规则"><a href="#2-2-标识符的概念与规则" class="headerlink" title="2.2 标识符的概念与规则"></a>2.2 标识符的概念与规则</h3><h4 id="2-2-1-什么是标识符？"><a href="#2-2-1-什么是标识符？" class="headerlink" title="2.2.1 什么是标识符？"></a>2.2.1 什么是标识符？</h4><p>凡是可以由自己命名的地方都称为标识符.</p>
<p>例: 项目名 ,包名 ,类名 .方法名</p>
<h4 id="2-2-2-命名规范"><a href="#2-2-2-命名规范" class="headerlink" title="2.2.2 命名规范"></a>2.2.2 命名规范</h4><p>①<strong>不可</strong>使用java关键字和保留字,但是可以包含关键字和保留字.</p>
<p>②可以使用26个字母大小写,数字0-9,$和_.</p>
<p>③    可以使用数字,但不可放在首位.</p>
<p>④    <strong>长度理论上没有限制,但命名最好能反映出其作用,遵循”驼峰形式”,见命知意</strong></p>
<p>⑤    <strong>包名全部小写，类名全部大驼峰式</strong></p>
<p>⑥    <strong>变量名、方法名首字母小写，如果名称由多个单词组成，每个单词的首字母都要大写</strong></p>
<p>⑦　<strong>常量（特指被 final 修饰的常量）名全部大写，如果是单个字母，需要大写，如果是多个单词，需要用下划线分开。并且都大写</strong></p>
<a id="more"></a>

<h2 id="3-常量"><a href="#3-常量" class="headerlink" title="3. 常量"></a>3. 常量</h2><h3 id="3-1-概念：常量的概念：在程序运行期间，固定不变的量"><a href="#3-1-概念：常量的概念：在程序运行期间，固定不变的量" class="headerlink" title="3.1 概念：常量的概念：在程序运行期间，固定不变的量"></a>3.1 概念：<strong>常量的概念：在程序运行期间，固定不变的量</strong></h3><h3 id="3-2-常量的分类："><a href="#3-2-常量的分类：" class="headerlink" title="3.2 常量的分类："></a>3.2 常量的分类：</h3><p>1.字符常量：凡是用单引号引起来的单个字符，就做字符常量。</p>
<p>2.字符串常量：凡是用双引号引起来的部分，叫做字符串常量。</p>
<p>3.整数常量：直接写上的数字，没有小数点。</p>
<p>4.浮点数常量：直接写上的数字，有小数点。</p>
<p>5.布尔常量：只有两种取值：true和false</p>
<h3 id="3-3基本数据类型："><a href="#3-3基本数据类型：" class="headerlink" title="3.3基本数据类型："></a>3.3基本数据类型：</h3><table>
<thead>
<tr>
<th>类型</th>
<th>字节数</th>
<th>二进制位数</th>
</tr>
</thead>
<tbody><tr>
<td>byte(字节型）</td>
<td>1</td>
<td>8</td>
</tr>
<tr>
<td>short（短整型）</td>
<td>2</td>
<td>16</td>
</tr>
<tr>
<td>int（整型）</td>
<td>4</td>
<td>32</td>
</tr>
<tr>
<td>long（长整形）</td>
<td>8</td>
<td>64</td>
</tr>
</tbody></table>
<hr>
<p>  注意事项：</p>
<pre><code>Java中的默认类型：整数类型是 int 、浮点类型是double
数据范围与字节数不一定相关，例如float数据范围比 long 更加广泛，但是float是4字节，1ong是8字节。    
浮点型可能只是一个近似值，并非精确的值。
浮点数当中默认类型是double。如果一定要使用float类型，需要加上一个后缀F。
字符串不是基本类型，而是引用类型
如果是整数，默认为int类型，如果一定要使用long类型，需要加上一个后缀L。推荐使用大写字母后缀。</code></pre><hr>
<h3 id="3-4创建变量"><a href="#3-4创建变量" class="headerlink" title="3.4创建变量"></a>3.4创建变量</h3><p>格式：</p>
<p>数据类型 变量名称 //创建了一个变量</p>
<p>变量名称=数据值 //赋值，右给左</p>
<p>我们也可以这样：</p>
<p>数据类型 变量名称=数据值//创建变量同时，放入指定数据值</p>
<hr>
<pre><code>注意：
1.如果创建多个变量，那么变量之间的名称不可以重复。 
2.对于float和long类型来说，字母后缀F 和 L不要丢掉。
3.没有进行赋值的变量，不能直接使用；一定要赋值之后，才能使用。</code></pre><h2 id="4-数据类型转换："><a href="#4-数据类型转换：" class="headerlink" title="4. 数据类型转换："></a>4. 数据类型转换：</h2><p>分为显式和隐式</p>
<p>隐式：</p>
<p>1.特点：无需处理，自动完成。<br>2.规则：数据范围从小到大</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">long num1&#x3D;100;</span><br><span class="line">System.out.println(num1);</span><br></pre></td></tr></table></figure>
<p>左边为long类型，右边是int，int–&gt;long，符合数据范围从小到大要求。</p>
<p>显式（强制类型转换）：</p>
<p>1.需经特殊处理<br>2.格式：范围小的类型范围小的变量名=（范围小的类型）原本范围大的数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int num &#x3D;(int)100L;</span><br><span class="line">System.out.println(num);</span><br></pre></td></tr></table></figure>
<p>左：int类型，右：long类型，不同</p>
<p>格式：范围小的数据类型 范围小的变量名=（范围小的类型）原本范围大的数据；</p>
<h2 id="5-输入与输出"><a href="#5-输入与输出" class="headerlink" title="5.输入与输出"></a>5.输入与输出</h2><h3 id="5-1读输入-输出"><a href="#5-1读输入-输出" class="headerlink" title="5.1读输入,输出"></a>5.1读输入,输出</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Scanner in&#x3D; new Scanner(System.in);</span><br><span class="line">System.out.println(in.nextLine());</span><br></pre></td></tr></table></figure>
<h3 id="5-2字符串的”-”"><a href="#5-2字符串的”-”" class="headerlink" title="5.2字符串的”+”"></a>5.2字符串的”+”</h3><p>·用来连接两个字符串形成更长的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">System.out.println(&quot;hello&quot;+&quot;world&quot;);</span><br><span class="line">System.out.println(&quot;hello&quot;+2);</span><br><span class="line">System.out.println(&quot;hello&quot;+2+3);</span><br><span class="line">System.out.println(2+3+&quot;hello&quot;);</span><br></pre></td></tr></table></figure>
<h2 id="6-判断语句-amp-循环语句-break-amp-continue"><a href="#6-判断语句-amp-循环语句-break-amp-continue" class="headerlink" title="6.判断语句&amp;循环语句 break&amp;continue"></a>6.判断语句&amp;循环语句 break&amp;continue</h2><p>·判断语句</p>
<pre><code>·if(条件){}

·switch选择判断语句</code></pre><p>·循环语句</p>
<pre><code>·for(;条件;){}

·while(){}

·do{}while{}</code></pre><p>·break表示退出整个循环或者判断</p>
<p>·continue只能用于循环体中，表示退出当前循环，继续下一次循环</p>
<h2 id="7-比较和equals比较"><a href="#7-比较和equals比较" class="headerlink" title="7.==比较和equals比较"></a>7.==比较和equals比较</h2><p>·==比较即比较内容也比较地址是否相同</p>
<p>·equals方法，比较两个对象内容是否相同</p>
<hr>
<p>注意：</p>
<pre><code>·字符串比较，不允许使用==，只能用equals方法

·如果Integer和Integer/int比较是否相等，绝对不能使用==</code></pre><hr>
<h2 id="8-数组"><a href="#8-数组" class="headerlink" title="8.数组"></a>8.数组</h2><h3 id="8-1一维数组"><a href="#8-1一维数组" class="headerlink" title="8.1一维数组"></a>8.1一维数组</h3><p>·先定义、开辟空间、赋值再使用</p>
<p>·Java中的数组长度不可变</p>
<p>·数组下标从0开始</p>
<p>·数组的定义：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">String[] items_0&#x3D;null;&#x2F;&#x2F;先定义 items_0&#x3D;new String [4];&#x2F;&#x2F;开辟空间</span><br><span class="line">String[] items_1&#x3D;new String [4];</span><br><span class="line">String[] items_2&#x3D;&#123;&quot;happy&quot;,&quot;new&quot;,&quot;year&quot;&#125;;</span><br><span class="line">String[] items_3&#x3D;new String[]&#123;&quot;happy&quot;,&quot;new&quot;,&quot;year&quot;&#125;;</span><br></pre></td></tr></table></figure>
<p>·小技巧：<br>如何不通过第三个变量交换两个变量的值？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int a&#x3D;10;</span><br><span class="line">int b&#x3D;20;</span><br><span class="line">a&#x3D;a+b;</span><br><span class="line">b&#x3D;a-b;</span><br><span class="line">a&#x3D;a-b;</span><br></pre></td></tr></table></figure>
<h3 id="8-2二维数组"><a href="#8-2二维数组" class="headerlink" title="8.2二维数组"></a>8.2二维数组</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">String[][] items&#x3D;new String [2][3];</span><br><span class="line">&#x2F;&#x2F;items[0]&#x3D;&#123;&quot;&quot;.&quot;&quot;,&quot;&quot;&#125;;是错误的</span><br><span class="line">&#x2F;&#x2F;items[0]&#x3D;new String[4]是正确的</span><br></pre></td></tr></table></figure>
<p>·数组的复制</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">System.arraycopy(strArr,0,strArr1,0,3);&#x2F;&#x2F;从左到右参数意义：从哪个数组，从哪开始复制，复制到哪？开始位置，复制多长</span><br><span class="line">System.out.println(&quot;copyOf复制：&quot;+Arrays.toString(Arrays.copyOf(strArr,3)));</span><br></pre></td></tr></table></figure>
<p>·数组的排序<br><code>Arrays.sort(strArr1);</code></p>
<h2 id="9-函数（方法）"><a href="#9-函数（方法）" class="headerlink" title="9.函数（方法）"></a>9.函数（方法）</h2><h3 id="9-1函数的概念："><a href="#9-1函数的概念：" class="headerlink" title="9.1函数的概念："></a>9.1函数的概念：</h3><p>函数是定义在类中的一段独立的代码块，用来实现某个功能，Java中，函数又被称为方法，这是与c，c++不同的。</p>
<p>函数的主要作用是为了提高代码的复用性。</p>
<p>函数都是在栈内存中运行，运行的函数处在栈顶。</p>
<p>函数格式：修饰符  返回值类型  函数名 （[参数类型1 参数名1，参数类型2 参数2…]){</p>
<p>//[ ]里面表示可选项，即参数不是必须的</p>
<p>执行语句…</p>
<p>return  返回值;//返回值类型必须与返回的值的类型一致</p>
<p>}</p>
<p>几点说明：</p>
<p>· 修饰符：可以是访问修饰符，也可以说是函数修饰符（abstract、final、 static、synchronized），还可以是两者的组合 </p>
<p>· 返回值类型：用于限定函数返回值的数据类型</p>
<p>· 参数类型：用于限定调用函数时传递的数据类型 </p>
<p>· 参数名：是一个变量，用来接收调用方法时传递的数据 </p>
<p>· return：用来接收方法以及返回函数指定类型的值 </p>
<p>· 返回值：这个值会返回给函数的调用者 </p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class method&#123;</span><br><span class="line">&#x2F;&#x2F;程序入口，主函数，方法&amp;函数，指的是同一个东西</span><br><span class="line">	public static void main(String[] args)&#123;</span><br><span class="line">	&#x2F;&#x2F;函数名调用</span><br><span class="line">		method01();</span><br><span class="line">		method02(9,3);</span><br><span class="line">		System.out.println(&quot;5+6&#x3D;&quot;+add(5,6));</span><br><span class="line">	&#125;</span><br><span class="line">	&#x2F;&#x2F;声明一个静态函数method01(),无参数返回值</span><br><span class="line">	static void method01()&#123;</span><br><span class="line">		System.out.println(&quot;这是01&quot;);</span><br><span class="line">		return;</span><br><span class="line">	&#125;</span><br><span class="line">	static int add(int num1,int num2)&#123;</span><br><span class="line">		int sum&#x3D;0;</span><br><span class="line">		sum&#x3D;num1+num2;</span><br><span class="line">		return sum;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="9-2函数的重载"><a href="#9-2函数的重载" class="headerlink" title="9.2函数的重载"></a>9.2函数的重载</h3><p>函数的重载是指，在同一个类中，可以定义多个函数名相同、参数列表不同的函数。</p>
<p>参数名相同，参数个数不同，参数列表不同均属于函数重载的情况。注意，函数的重载和返回值类型无关。</p>
<p>调用时通过函数名和参数列表来确定一个函数。</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Overloading &#123;</span><br><span class="line"> </span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line"> </span><br><span class="line">	&#x2F;&#x2F;函数同名,发生重载,调用时通过函数名和参数列表来确定一个函数。</span><br><span class="line">	name(5);</span><br><span class="line">	name(3, 4);</span><br><span class="line">	name(1, &#39;A&#39;);</span><br><span class="line">	name(&#39;Z&#39;, 26);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public static void name(int i) &#123;</span><br><span class="line">	System.out.println(&quot;void name(int i)的函数被调用！&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; 与返回值无关,同名函数会发生错误</span><br><span class="line">    &#x2F;&#x2F; public static int name(int i) &#123;</span><br><span class="line">    &#x2F;&#x2F; System.out.println(&quot;int name(int i)的函数被调用！&quot;);</span><br><span class="line">    &#x2F;&#x2F; return i-1;</span><br><span class="line">    &#x2F;&#x2F; &#125;</span><br><span class="line"> </span><br><span class="line">    private static void name(int i, int j) &#123;</span><br><span class="line">	System.out.println(&quot;name(int i, int j)的函数被调用！&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F; private static void name(int j,int i) &#123;&#125; &#x2F;&#x2F;于 name(int i, int</span><br><span class="line">    &#x2F;&#x2F; j)是一样的,是同一个函数,会发生错误</span><br><span class="line"> </span><br><span class="line">    private static void name(int i, char j) &#123;</span><br><span class="line">	System.out.println(&quot;name(int i, char j)的函数被调用！&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    private static void name(char j, int i) &#123;</span><br><span class="line">	System.out.println(&quot;name(char j, int i)的函数被调用！&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>运行结果：</p>
<p><img src="https://img-blog.csdn.net/20180726103700297?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MzA1NTMw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt=""></p>
<h3 id="9-3函数的递归"><a href="#9-3函数的递归" class="headerlink" title="9.3函数的递归"></a>9.3函数的递归</h3><p>函数的递归是指在一个函数的内部调用自身的过程。</p>
<p>递归必须要有结束条件，不然就会陷入无限递归状态，永远无法结束函数的调用。</p>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Di_gui_easy &#123;</span><br><span class="line"> </span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line"> </span><br><span class="line">	int sum &#x3D; sum(50);&#x2F;&#x2F; 利用递归求1~50的和</span><br><span class="line">	System.out.println(&quot;1+2+3+4+....+47+38+49+50&#x3D;&quot; + sum);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    &#x2F;&#x2F; 利用递归求累加值</span><br><span class="line">    private static int sum(int i) &#123;</span><br><span class="line"> </span><br><span class="line">	if (i &#x3D;&#x3D; 1) &#123;</span><br><span class="line">	    return 1;</span><br><span class="line">	&#125;</span><br><span class="line"> </span><br><span class="line">	return i + sum(i - 1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<p><img src="https://img-blog.csdn.net/20180726103536879?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MzA1NTMw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt=""></p>
<h2 id="10-类"><a href="#10-类" class="headerlink" title="10.类"></a>10.类</h2><p>·定义：是一类事物的描述，程序中为class；</p>
<p>·属性：即一类事物具有的共有特点或者特性；程序中为全局变量（成员变量)</p>
<p>·方法：一类事物具有的动作；</p>
<p>·类的定义与使用</p>
<p>·class类名称<br>{<br>    属性<br>    方法<br>}<br>·使用关键字new就可以创建类对象，使用对象.方法,对象.属性就可以完成调用</p>
<p>·抽象类：abstract</p>
<p> 抽象类的特点：</p>
<p>1：抽象方法只能定义在抽象类中，抽象类和抽象方法必须由abstract关键字修饰（可以描述类和方法，不可以描述变量）。</p>
<p>2：抽象方法只定义方法声明，并不定义方法实现。非抽象的方法可以定义方法实现。</p>
<p>3：抽象类不可以被创建对象(实例化)。</p>
<p>4：只有通过子类继承抽象类并覆盖了抽象类中的所有抽象方法后，该子类才可以实例化。否则，该子类还是一个抽象类。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>my first hexo blog</title>
    <url>/2020/02/25/my-first-hexo-blog/</url>
    <content><![CDATA[<h1 id="这是我的第一篇博客"><a href="#这是我的第一篇博客" class="headerlink" title="这是我的第一篇博客"></a>这是我的第一篇博客</h1><p>忙坏了，先写一个hello，world吧</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">cout&lt;&lt;hello,world&lt;&lt;endl;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/02/24/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
